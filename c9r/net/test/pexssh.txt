-*- mode:python -*-

$Id: pexssh.txt,v 1.1 2014/03/04 20:51:48 weiwang Exp $

This program is licensed under the GPL v3.0, which is found at the URL below:
	http://opensource.org/licenses/gpl-3.0.html

Copyright (c) 2009 Regents of the University of Michigan.
All rights reserved.

Redistribution and use in source and binary forms are permitted
provided that this notice is preserved and that due credit is given
to the University of Michigan at Ann Arbor. The name of the University
may not be used to endorse or promote products derived from this
software without specific prior written permission. This software
is provided ``as is'' without express or implied warranty.

Usage: To use this unit test, one must pre-set the following:

    # # For testing pexssh to localhost:
    # # Add the SSH key of the local host to ~/.ssh/authorized_keys
    # keychain
    # source ~/.keychain/*-sh
    # ssh-add
    # #
    # # For testing pexssh to Cisco IOS device:
    # export nssrancid='password-of-nssrancid'
    # # For texting enable mode:
    # export enable='enable-password'
    # # For texting pexssh to Cisco ACE device:
    # export admin='ACE-admin-user-password'
    # # For security -- clear bash command history:
    # history -c

Tests:

    >>> import os, re
    >>> for envvar in [ 'nssrancid', 'enable', 'admin' ]:
    ...   if os.environ.get(envvar, None) is None:
    ...     print('Missing os.environ["'+envvar+'"]')
    >>> from c9r.net.pexssh import CSSH, CSSHError
    >>> myssh = CSSH('localhost', # Must have keychain in place
    ...              conf={ 'options': { 'maxread': 1 } })
    >>> myssh.prompt = myssh.prompt[:-1]
    >>> uptime = myssh('uptime\n')
    >>> mx = re.search('\s+up\s+(\d+):(\d+)', uptime)
    >>> if mx is None:
    ...   mx = re.search('\s+up\s+\d+\s+days\s+(\d+):(\d+)', uptime)
    >>> if mx is not None:
    ...   print('Testing pexssh to localhost is successful')
    Testing pexssh to localhost is successful

    >>> myssh.logout()
    >>> try:
    ...   myssh = CSSH('10.55.139.16', { 'user': 'nssrancid', 'password': os.environ['nssrancid'] })
    ... except CSSHError as e:
    ...   pass
    >>> myssh.prompt[-8:] == '-139-16>'
    True
    >>> output = myssh('enable', prompt=None)
    >>> myssh.expect('(?i)password:')
    0
    >>> myssh.sendline(os.environ['enable']) > 0
    True
    >>> myssh.detect_prompt()
    >>> output = myssh('terminal length 0')
    >>> config = myssh('write terminal')
    >>> mx = re.search('hostname\s+(\S+)', config)
    >>> hostname = None if mx is None else mx.group(1)
    >>> hostname is not None
    True
    >>> if re.match(hostname+'[#$]', myssh.prompt) is not None:
    ...   print('Testing pexssh to Cisco IOS device and enable mode is successful')
    Testing pexssh to Cisco IOS device and enable mode is successful
    >>> myssh.logout()

    >>> # ACE tests
    >>> myssh = CSSH('172.20.114.16', { 'user': 'admin', 'password': os.environ['admin'] })
    >>> output = myssh('terminal length 0')
    >>> usage = myssh('show resource usage')
    >>> mx = re.search('Context:\s+Admin', usage)
    >>> if mx is not None:
    ...   print('Testing pexssh to Cisco ACE device and finding Admin context is successful')
    Testing pexssh to Cisco ACE device and finding Admin context is successful
