-*- mode:python -*-

$Id: issh.txt,v 1.3 2015/10/23 03:01:17 weiwang Exp $

This program is licensed under the GPL v3.0, which is found at the URL below:
	http://opensource.org/licenses/gpl-3.0.html

Test 1: localhost

    >>> import os, re
    >>> from paramiko.ssh_exception import SSHException
    >>> from c9r.net.issh import SecureShell as pyssh
    >>> myssh = pyssh('localhost') # Must have keychain in place
    >>> uptime = myssh.run('uptime')
    >>> isinstance(uptime, tuple)
    True
    >>> uptime = dict(uptime)['uptime']
    >>> mx = re.search('\s+up\s+(\d+).*,\s+\d+\s+users,\s+load average:\s+', uptime)
    >>> if mx is None:
    ...   mx = re.search('\s+up\s+\d+\s+[day|days|hour|hours|min]\s+(\d+):(\d+)', uptime)
    >>> if mx is None:
    ...   print('Failure: Testing issh to run uptime on localhost')

Test 2: Test for 'sudo bash' on localhost

    >>> myssh.sendline('sudo bash')
    >>> myssh.expect(['\[sudo\] password for \w+: '])
    0

Test 3: Test for Cisco switch with "enable" -- Disabled because of MCIT policy

    <<< ip = myssh.config('test_switch')
    <<< sw = pyssh(ip)
    <<< cmd = 'show clock'
    <<< clock = sw.run(cmd)
    <<< clock = dict(clock)[cmd]
    <<< mx = re.search('\d+:\d+:\d+\.\d+\s+\w+\s+\w+\s+\w+\s+\d+\s+\d+', clock)
    <<< if mx is None:
    ...   print('Failure: Testing issh to run "{0}" on {1}.'.format(cmd, ip))
    <<< sw.sendline('enable')
    <<< sw.expect(['Password:'])
    0
    <<< sw.send_password('enable')
    <<< sw.detect_prompt()
    <<< sw.sendline()
    <<< sw.expect([sw.prompt])
    0

Test 4: Testing missing-key policies

    >>> ssh_reject = pyssh(known_hosts='/dev/null', missing_key='reject')
    >>> unknown = '127.0.0.1'
    >>> try:
    ...     ssh_reject.connect(unknown)
    ...     connected = True
    ... except SSHException:
    ...     connected = False
    >>> 'Connected?' if connected else 'Rejected!'
    'Rejected!'
    >>> if connected:
    ...     hostkeys = ssh_reject.sshc.get_host_keys()
    ...     hostkeys.lookup(unknown) != None
    ... else:
    ...     'It should have been rejected!'
    'It should have been rejected!'
    >>> try:
    ...     ssh_fail = pyssh(known_hosts='~/.ssh/known_hosts-file-does-not-exist')
    ... except IOError:
    ...     pass
    >>> ssh_accept = pyssh(known_hosts='/dev/null', missing_key='accept')
    >>> ssh_accept.connect(unknown)
    >>> uptime = ssh_accept.run('uptime')
    >>> isinstance(uptime, tuple)
    True
